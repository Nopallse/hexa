openapi: 3.0.3
info:
  title: Hexa Crochet E-commerce API
  description: |
    Backend API untuk toko e-commerce Hexa Crochet yang menjual produk rajutan (crochet) dengan menggunakan Express.js, Prisma ORM, dan Supabase PostgreSQL.
    
    ## Fitur Utama
    - Authentication dengan Supabase Auth
    - Manajemen produk dan kategori
    - Shopping cart dan checkout
    - Order management
    - Payment processing
    - Shipping tracking
    - Address management
    
    ## Authentication
    API menggunakan Supabase Auth dengan JWT tokens. Setiap request yang memerlukan autentikasi harus menyertakan header:
    ```
    Authorization: Bearer <access_token>
    ```
  version: 1.0.0
  contact:
    name: Hexa Crochet Team
    email: support@hexacrochet.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://hexacrochet.my.id
    description: Development server
  - url: https://api.hexacrochet.com
    description: Production server

security:
  - BearerAuth: []

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Check if the API is running and healthy
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
                    example: 1234.567

  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - full_name
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  minLength: 6
                  example: password123
                full_name:
                  type: string
                  example: John Doe
                phone:
                  type: string
                  example: 081234567890
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User registered successfully
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and get access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login successful
                  user:
                    $ref: '#/components/schemas/User'
                  session:
                    $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Logout current user and invalidate session
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logout successful
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user profile
      description: Get profile information of the authenticated user
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      description: Retrieve all product categories
      security: []
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Categories
      summary: Create new category
      description: Create a new product category (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: Boneka Rajutan
                description:
                  type: string
                  example: Berbagai macam boneka rajutan lucu dan menggemaskan
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Category created successfully
                  data:
                    $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/categories/{id}:
    get:
      tags:
        - Categories
      summary: Get category by ID
      description: Retrieve a specific category with its products
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/CategoryWithProducts'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Categories
      summary: Update category
      description: Update an existing category (admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Boneka Rajutan Updated
                description:
                  type: string
                  example: Updated description
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Category updated successfully
                  data:
                    $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Categories
      summary: Delete category
      description: Delete a category (admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Category deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve all products with filtering and pagination
      security: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: category_id
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by category ID
        - name: search
          in: query
          schema:
            type: string
          description: Search products by name
        - name: min_price
          in: query
          schema:
            type: number
            format: decimal
          description: Minimum price filter
        - name: max_price
          in: query
          schema:
            type: number
            format: decimal
          description: Maximum price filter
        - name: sort
          in: query
          schema:
            type: string
            enum: [name, price, created_at]
            default: created_at
          description: Sort field
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Products
      summary: Create new product
      description: Create a new product (admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - category_id
                - name
                - price
              properties:
                category_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                name:
                  type: string
                  example: Boneka Beruang Rajutan
                description:
                  type: string
                  example: Boneka beruang lucu dengan ukuran 25cm
                price:
                  type: number
                  format: decimal
                  example: 75000
                stock:
                  type: integer
                  example: 10
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Product created successfully
                  data:
                    $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Retrieve a specific product with details
      security: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ProductDetail'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Products
      summary: Update product
      description: Update an existing product (admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category_id:
                  type: string
                  format: uuid
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: decimal
                stock:
                  type: integer
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Product updated successfully
                  data:
                    $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Products
      summary: Delete product
      description: Delete a product (admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Product deleted successfully
                  type:
                    type: string
                    example: soft_delete
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/cart:
    get:
      tags:
        - Cart
      summary: Get user's cart
      description: Retrieve all items in the user's shopping cart
      responses:
        '200':
          description: Cart retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Cart
      summary: Add item to cart
      description: Add a product variant to the shopping cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - product_variant_id
                - quantity
              properties:
                product_variant_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                quantity:
                  type: integer
                  minimum: 1
                  example: 2
      responses:
        '201':
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Item added to cart successfully
                  data:
                    $ref: '#/components/schemas/CartItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Cart
      summary: Clear entire cart
      description: Remove all items from the shopping cart
      responses:
        '200':
          description: Cart cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Cart cleared successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/cart/{id}:
    put:
      tags:
        - Cart
      summary: Update cart item quantity
      description: Update the quantity of a specific cart item
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  example: 3
      responses:
        '200':
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Cart item updated successfully
                  data:
                    $ref: '#/components/schemas/CartItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Cart
      summary: Remove item from cart
      description: Remove a specific item from the shopping cart
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Item removed from cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Item removed from cart successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/orders:
    get:
      tags:
        - Orders
      summary: Get user's orders
      description: Retrieve all orders for the authenticated user
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, processing, shipped, delivered, cancelled]
          description: Filter by order status
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Orders
      summary: Create new order
      description: Create a new order from cart items (checkout)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - address_id
                - shipping_cost
              properties:
                address_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                shipping_cost:
                  type: number
                  format: decimal
                  minimum: 0
                  example: 15000
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Order created successfully
                  data:
                    type: object
                    properties:
                      order_id:
                        type: string
                        format: uuid
                      total_amount:
                        type: number
                        format: decimal
                      shipping_cost:
                        type: number
                        format: decimal
                      status:
                        type: string
                        example: pending
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/orders/payment-methods:
    get:
      tags:
        - Orders
      summary: Get available payment methods
      description: Get list of available payment methods
      security: []
      responses:
        '200':
          description: Payment methods retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: paypal
                        name:
                          type: string
                          example: PayPal
                        description:
                          type: string
                          example: Pay securely with PayPal
                        icon:
                          type: string
                          example: 💳
                        available:
                          type: boolean
                          example: true
                        requires_approval:
                          type: boolean
                          example: true
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      description: Retrieve a specific order with details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Orders
      summary: Cancel order
      description: Cancel a pending order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Order cancelled successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/orders/{id}/status:
    put:
      tags:
        - Orders
      summary: Update order status
      description: Update the status of an order (admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, processing, shipped, delivered, cancelled]
                  example: processing
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Order status updated successfully
                  data:
                    $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/orders/{id}/payment-status:
    get:
      tags:
        - Orders
      summary: Get order payment status
      description: Get payment status for a specific order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Order payment status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      order_id:
                        type: string
                        format: uuid
                      payment_status:
                        type: string
                        enum: [unpaid, paid, failed, refunded]
                        example: paid
                      total_amount:
                        type: number
                        format: decimal
                        example: 150000
                      shipping_cost:
                        type: number
                        format: decimal
                        example: 15000
                      payments:
                        type: array
                        items:
                          $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/payments:
    post:
      tags:
        - Payments
      summary: Create payment
      description: Create a payment for an order (traditional methods)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - order_id
                - payment_method
                - amount
              properties:
                order_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                payment_method:
                  type: string
                  enum: [transfer, e-wallet, COD]
                  example: transfer
                amount:
                  type: number
                  format: decimal
                  minimum: 0
                  example: 165000
                payment_reference:
                  type: string
                  example: TRF123456789
      responses:
        '201':
          description: Payment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Payment created successfully
                  data:
                    $ref: '#/components/schemas/Payment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/payments/paypal/create:
    post:
      tags:
        - Payments
      summary: Create PayPal payment
      description: Create a new PayPal payment for an order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - order_id
              properties:
                order_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '201':
          description: PayPal payment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: PayPal payment created successfully
                  data:
                    type: object
                    properties:
                      paypal_order_id:
                        type: string
                        example: 2X12345678901234567
                      approval_url:
                        type: string
                        example: https://www.sandbox.paypal.com/checkoutnow?token=2X12345678901234567
                      order_id:
                        type: string
                        format: uuid
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/payments/paypal/capture:
    post:
      tags:
        - Payments
      summary: Capture PayPal payment
      description: Capture a PayPal payment after user approval
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - paypal_order_id
              properties:
                paypal_order_id:
                  type: string
                  example: 2X12345678901234567
      responses:
        '200':
          description: PayPal payment captured successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: PayPal payment captured successfully
                  data:
                    type: object
                    properties:
                      capture_id:
                        type: string
                        example: 1A12345678901234567
                      order_id:
                        type: string
                        format: uuid
                      status:
                        type: string
                        example: COMPLETED
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/payments/paypal/webhook:
    post:
      tags:
        - Payments
      summary: PayPal webhook handler
      description: Handle PayPal webhook events
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: 8PT597110X687430LKGECATA
                event_type:
                  type: string
                  example: PAYMENT.CAPTURE.COMPLETED
                resource:
                  type: object
                  properties:
                    id:
                      type: string
                      example: 1A12345678901234567
                    amount:
                      type: object
                      properties:
                        currency_code:
                          type: string
                          example: USD
                        value:
                          type: string
                          example: 10.00
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Webhook processed successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/payments/paypal/refund:
    post:
      tags:
        - Payments
      summary: Refund PayPal payment
      description: Process a refund for a PayPal payment (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - payment_id
              properties:
                payment_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                amount:
                  type: number
                  format: decimal
                  example: 50.00
                  description: Partial refund amount (optional, full refund if not provided)
                reason:
                  type: string
                  example: Customer requested refund
      responses:
        '200':
          description: Refund processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Refund processed successfully
                  data:
                    type: object
                    properties:
                      refund_id:
                        type: string
                        example: 1B12345678901234567
                      status:
                        type: string
                        example: COMPLETED
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/payments/{orderId}:
    get:
      tags:
        - Payments
      summary: Get payment info for order
      description: Get payment information for a specific order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: Payment info retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      order_id:
                        type: string
                        format: uuid
                      total_amount:
                        type: number
                        format: decimal
                      shipping_cost:
                        type: number
                        format: decimal
                      payment_status:
                        type: string
                        enum: [unpaid, paid, failed, refunded]
                      payments:
                        type: array
                        items:
                          $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/payments/{id}/verify:
    put:
      tags:
        - Payments
      summary: Verify payment
      description: Verify a payment (admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - payment_status
              properties:
                payment_status:
                  type: string
                  enum: [paid, failed, refunded]
                  example: paid
                payment_date:
                  type: string
                  format: date-time
                  example: 2023-12-01T10:30:00Z
      responses:
        '200':
          description: Payment verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Payment status updated successfully
                  data:
                    $ref: '#/components/schemas/Payment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: user@example.com
        full_name:
          type: string
          example: John Doe
        role:
          type: string
          enum: [user, admin]
          example: user

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          example: user@example.com
        full_name:
          type: string
          example: John Doe
        phone:
          type: string
          example: 081234567890
        role:
          type: string
          enum: [user, admin]
          example: user
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Session:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: Boneka Rajutan
        description:
          type: string
          example: Berbagai macam boneka rajutan lucu
        created_at:
          type: string
          format: date-time

    CategoryWithProducts:
      allOf:
        - $ref: '#/components/schemas/Category'
        - type: object
          properties:
            products:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  price:
                    type: number
                    format: decimal
                  stock:
                    type: integer
                  created_at:
                    type: string
                    format: date-time

    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          example: Boneka Beruang Rajutan
        description:
          type: string
          example: Boneka beruang lucu dengan ukuran 25cm
        price:
          type: number
          format: decimal
          example: 75000
        stock:
          type: integer
          example: 10
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        category:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        product_images:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              image_url:
                type: string
              is_primary:
                type: boolean
        product_variants:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              sku:
                type: string
              variant_name:
                type: string
              price:
                type: number
                format: decimal
              stock:
                type: integer

    ProductDetail:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            category:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                name:
                  type: string
                description:
                  type: string
            product_variants:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  sku:
                    type: string
                  variant_name:
                    type: string
                  price:
                    type: number
                    format: decimal
                  stock:
                    type: integer
                  variant_options:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        option_name:
                          type: string
                        option_value:
                          type: string

    CartItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        product_variant_id:
          type: string
          format: uuid
        quantity:
          type: integer
          example: 2
        created_at:
          type: string
          format: date-time
        product_variant:
          type: object
          properties:
            id:
              type: string
              format: uuid
            sku:
              type: string
            variant_name:
              type: string
            price:
              type: number
              format: decimal
            stock:
              type: integer
            product:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                name:
                  type: string
                product_images:
                  type: array
                  items:
                    type: object
                    properties:
                      image_url:
                        type: string
            variant_options:
              type: array
              items:
                type: object
                properties:
                  option_name:
                    type: string
                  option_value:
                    type: string

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        address_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
          example: pending
        total_amount:
          type: number
          format: decimal
          example: 165000
        shipping_cost:
          type: number
          format: decimal
          example: 15000
        payment_status:
          type: string
          enum: [unpaid, paid, refunded]
          example: unpaid
        created_at:
          type: string
          format: date-time
        address:
          type: object
          properties:
            address_line:
              type: string
            city:
              type: string
            province:
              type: string
            postal_code:
              type: string
        order_items:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              quantity:
                type: integer
              price:
                type: number
                format: decimal
              product_variant:
                type: object
                properties:
                  product:
                    type: object
                    properties:
                      name:
                        type: string
                      product_images:
                        type: array
                        items:
                          type: object
                          properties:
                            image_url:
                              type: string
                  variant_options:
                    type: array
                    items:
                      type: object
                      properties:
                        option_name:
                          type: string
                        option_value:
                          type: string

    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        address_line:
          type: string
          example: Jl. Contoh No. 123
        city:
          type: string
          example: Jakarta
        province:
          type: string
          example: DKI Jakarta
        postal_code:
          type: string
          example: 12345
        is_primary:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time

    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        payment_method:
          type: string
          enum: [transfer, e-wallet, COD, paypal]
          example: transfer
        payment_status:
          type: string
          enum: [pending, paid, failed, refunded]
          example: pending
        payment_date:
          type: string
          format: date-time
        amount:
          type: number
          format: decimal
          example: 165000
        payment_reference:
          type: string
          example: TRF123456789

    Shipping:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        courier:
          type: string
          example: JNE
        tracking_number:
          type: string
          example: JNE123456789
        shipping_status:
          type: string
          enum: [pending, shipped, in_transit, delivered]
          example: shipped
        estimated_delivery:
          type: string
          format: date-time
        shipped_at:
          type: string
          format: date-time
        delivered_at:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10
        total:
          type: integer
          example: 25
        pages:
          type: integer
          example: 3

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: Error message
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

  responses:
    BadRequest:
      description: Bad request - Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error: Validation failed
            details:
              - field: email
                message: Invalid email format

    Unauthorized:
      description: Unauthorized - Missing or invalid token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error: Access token required

    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error: Insufficient permissions

    NotFound:
      description: Not found - Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error: Resource not found

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error: Internal server error

  # Currency Endpoints
  /api/currency/supported:
    get:
      tags:
        - Currency
      summary: Get supported currencies
      description: Get all supported currencies from Fixer.io
      responses:
        '200':
          description: Supported currencies retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      success:
                        type: boolean
                      symbols:
                        type: object
                        additionalProperties:
                          type: string
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/currency/popular:
    get:
      tags:
        - Currency
      summary: Get popular currencies
      description: Get list of popular currencies for selection
      responses:
        '200':
          description: Popular currencies retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                        name:
                          type: string
                        symbol:
                          type: string
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/currency/rates:
    get:
      tags:
        - Currency
      summary: Get latest exchange rates
      description: Get latest exchange rates from Fixer.io
      parameters:
        - name: base
          in: query
          description: Base currency (default: IDR)
          required: false
          schema:
            type: string
            example: IDR
        - name: symbols
          in: query
          description: Comma-separated currency codes (optional)
          required: false
          schema:
            type: string
            example: USD,EUR,GBP
      responses:
        '200':
          description: Exchange rates retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      success:
                        type: boolean
                      timestamp:
                        type: integer
                      base:
                        type: string
                      date:
                        type: string
                      rates:
                        type: object
                        additionalProperties:
                          type: number
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/currency/convert:
    post:
      tags:
        - Currency
      summary: Convert currency
      description: Convert amount from one currency to another
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - from
                - to
              properties:
                amount:
                  type: number
                  description: Amount to convert
                  example: 100
                from:
                  type: string
                  description: Source currency
                  example: IDR
                to:
                  type: string
                  description: Target currency
                  example: USD
                date:
                  type: string
                  format: date
                  description: Historical date (optional, format: YYYY-MM-DD)
                  example: "2023-12-25"
      responses:
        '200':
          description: Currency converted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      success:
                        type: boolean
                      query:
                        type: object
                        properties:
                          from:
                            type: string
                          to:
                            type: string
                          amount:
                            type: number
                      info:
                        type: object
                        properties:
                          timestamp:
                            type: integer
                          rate:
                            type: number
                      result:
                        type: number
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/currency/convert-to-base:
    post:
      tags:
        - Currency
      summary: Convert to base currency (IDR)
      description: Convert amount to base currency (IDR)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - from
              properties:
                amount:
                  type: number
                  description: Amount to convert
                  example: 100
                from:
                  type: string
                  description: Source currency
                  example: USD
      responses:
        '200':
          description: Currency converted to base successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      amount:
                        type: number
                      currency:
                        type: string
                      formatted:
                        type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/currency/convert-from-base:
    post:
      tags:
        - Currency
      summary: Convert from base currency (IDR)
      description: Convert amount from base currency (IDR) to target currency
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - to
              properties:
                amount:
                  type: number
                  description: Amount in IDR
                  example: 1500000
                to:
                  type: string
                  description: Target currency
                  example: USD
      responses:
        '200':
          description: Currency converted from base successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      amount:
                        type: number
                      currency:
                        type: string
                      formatted:
                        type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/currency/format:
    post:
      tags:
        - Currency
      summary: Format currency with symbol
      description: Format currency amount with proper symbol and formatting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - currency
              properties:
                amount:
                  type: number
                  description: Amount to format
                  example: 1500000
                currency:
                  type: string
                  description: Currency code
                  example: IDR
      responses:
        '200':
          description: Currency formatted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      amount:
                        type: number
                      currency:
                        type: string
                      formatted:
                        type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: User authentication and authorization
  - name: Categories
    description: Product category management
  - name: Products
    description: Product management
  - name: Cart
    description: Shopping cart operations
  - name: Orders
    description: Order management
  - name: Addresses
    description: User address management
  - name: Payments
    description: Payment processing
  - name: Shipping
    description: Shipping and delivery tracking
  - name: Currency
    description: Multi-currency support and exchange rates
